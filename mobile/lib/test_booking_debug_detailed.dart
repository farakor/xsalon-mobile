import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'data/services/booking_service.dart';
import 'data/services/client_service.dart';
import 'data/models/client.dart';

/// –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –ª–æ–≥–∞–º–∏
/// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
class DetailedBookingTest {
  static Future<void> runDetailedTest() async {
    print('üîç === –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ü–ò–°–ò ===');
    
    try {
      final supabase = Supabase.instance.client;
      final bookingService = BookingService();
      final clientService = ClientService();
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      print('üîç 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      final currentUser = supabase.auth.currentUser;
      if (currentUser == null) {
        print('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
      }
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${currentUser.id}');
      print('   Email: ${currentUser.email ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}');
      print('   Phone: ${currentUser.phone ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}');
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      print('üîç 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      try {
        final userProfile = await supabase
            .from('user_profiles')
            .select('id, full_name, role, phone')
            .eq('id', currentUser.id)
            .single();
        print('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω:');
        print('   –ò–º—è: ${userProfile['full_name'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}');
        print('   –†–æ–ª—å: ${userProfile['role'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}');
        print('   –¢–µ–ª–µ—Ñ–æ–Ω: ${userProfile['phone'] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}');
      } catch (e) {
        print('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: $e');
        return;
      }
      
      // 3. –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Å—Ç–µ—Ä–∞
      print('üîç 3. –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Å—Ç–µ—Ä–∞...');
      String masterId;
      try {
        masterId = await bookingService.getCurrentMasterId();
        print('‚úÖ –ú–∞—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω: $masterId');
      } catch (e) {
        print('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –º–∞—Å—Ç–µ—Ä–∞: $e');
        return;
      }
      
      // 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
      print('üîç 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...');
      List<Client> clients;
      try {
        clients = await clientService.getClients();
        print('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.length}');
        if (clients.isNotEmpty) {
          print('   –ü–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${clients.first.fullName} (${clients.first.id})');
          print('   –¢–µ–ª–µ—Ñ–æ–Ω: ${clients.first.phone}');
          print('   –°—Ç–∞—Ç—É—Å: ${clients.first.status}');
        }
      } catch (e) {
        print('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤: $e');
        return;
      }
      
      if (clients.isEmpty) {
        print('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }
      
      // 5. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
      print('üîç 5. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥...');
      List<Map<String, dynamic>> services;
      try {
        final response = await supabase
            .from('services')
            .select('id, name, price, duration_minutes')
            .eq('is_active', true)
            .limit(5);
        services = List<Map<String, dynamic>>.from(response);
        print('‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: ${services.length}');
        if (services.isNotEmpty) {
          print('   –ü–µ—Ä–≤–∞—è —É—Å–ª—É–≥–∞: ${services.first['name']} (${services.first['id']})');
          print('   –¶–µ–Ω–∞: ${services.first['price']}');
          print('   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${services.first['duration_minutes']} –º–∏–Ω');
        }
      } catch (e) {
        print('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏: $e');
        return;
      }
      
      if (services.isEmpty) {
        print('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —É—Å–ª—É–≥ –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }
      
      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
      print('üîç 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏...');
      final startTime = DateTime.now().add(const Duration(hours: 2));
      final endTime = startTime.add(Duration(minutes: services.first['duration_minutes'] ?? 60));
      
      try {
        final isAvailable = await bookingService.isTimeSlotAvailable(
          masterId: masterId,
          startTime: startTime,
          endTime: endTime,
        );
        print('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–æ' : '–∑–∞–Ω—è—Ç–æ'}');
      } catch (e) {
        print('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: $e');
        return;
      }
      
      // 7. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
      print('üîç 7. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å...');
      final testClient = clients.first;
      final testService = services.first;
      final price = (testService['price'] ?? 100.0).toDouble();
      
      print('   –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:');
      print('     –ö–ª–∏–µ–Ω—Ç: ${testClient.fullName} (${testClient.id})');
      print('     –ú–∞—Å—Ç–µ—Ä: $masterId');
      print('     –£—Å–ª—É–≥–∞: ${testService['name']} (${testService['id']})');
      print('     –í—Ä–µ–º—è: $startTime - $endTime');
      print('     –¶–µ–Ω–∞: $price');
      
      try {
        final bookingId = await bookingService.createBooking(
          clientId: testClient.id,
          masterId: masterId,
          serviceId: testService['id'],
          startTime: startTime,
          endTime: endTime,
          totalPrice: price,
          finalPrice: price,
          clientNotes: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        );
        
        print('üéâ –£–°–ü–ï–•! –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: $bookingId');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∞—Å—å
        final createdBooking = await supabase
            .from('bookings')
            .select('id, status, client_id, master_id, service_id')
            .eq('id', bookingId)
            .single();
            
        print('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î');
        print('   ID: ${createdBooking['id']}');
        print('   –°—Ç–∞—Ç—É—Å: ${createdBooking['status']}');
        print('   –ö–ª–∏–µ–Ω—Ç ID: ${createdBooking['client_id']}');
        print('   –ú–∞—Å—Ç–µ—Ä ID: ${createdBooking['master_id']}');
        print('   –£—Å–ª—É–≥–∞ ID: ${createdBooking['service_id']}');
        
      } catch (e) {
        print('‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: $e');
        if (e is PostgrestException) {
          print('   –ö–æ–¥ –æ—à–∏–±–∫–∏: ${e.code}');
          print('   –°–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
          print('   –î–µ—Ç–∞–ª–∏: ${e.details}');
          print('   –ü–æ–¥—Å–∫–∞–∑–∫–∞: ${e.hint}');
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
        try {
          final clientCheck = await supabase
              .from('clients')
              .select('id, full_name')
              .eq('id', testClient.id)
              .single();
          print('‚úÖ –ö–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${clientCheck['full_name']}');
        } catch (clientError) {
          print('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $clientError');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Å—Ç–µ—Ä
        try {
          final masterCheck = await supabase
              .from('masters')
              .select('id, specialization')
              .eq('id', masterId)
              .single();
          print('‚úÖ –ú–∞—Å—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${masterCheck['specialization']}');
        } catch (masterError) {
          print('‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: $masterError');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Å–ª—É–≥–∞
        try {
          final serviceCheck = await supabase
              .from('services')
              .select('id, name')
              .eq('id', testService['id'])
              .single();
          print('‚úÖ –£—Å–ª—É–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${serviceCheck['name']}');
        } catch (serviceError) {
          print('‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $serviceError');
        }
      }
      
    } catch (e) {
      print('‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê: $e');
    }
    
    print('üîç === –ö–û–ù–ï–¶ –î–ï–¢–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê ===');
  }
}
