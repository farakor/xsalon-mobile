import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../../core/config/supabase_config.dart';
import '../../data/models/user_profile.dart';
import '../../data/services/sms_debug_service.dart';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
enum AuthStatus {
  initial,
  loading,
  authenticated,
  unauthenticated,
  error,
}

// –ú–æ–¥–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class AuthState {
  final AuthStatus status;
  final User? user;
  final UserProfile? profile;
  final String? errorMessage;

  const AuthState({
    this.status = AuthStatus.initial,
    this.user,
    this.profile,
    this.errorMessage,
  });

  AuthState copyWith({
    AuthStatus? status,
    User? user,
    UserProfile? profile,
    String? errorMessage,
  }) {
    return AuthState(
      status: status ?? this.status,
      user: user ?? this.user,
      profile: profile ?? this.profile,
      errorMessage: errorMessage ?? this.errorMessage,
    );
  }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
class AuthNotifier extends StateNotifier<AuthState> {
  AuthNotifier() : super(const AuthState());

  SupabaseClient get _supabase => SupabaseConfig.client;

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  void initialize() {
    _initializeAuth();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  void _initializeAuth() {
    final session = _supabase.auth.currentSession;
    if (session != null) {
      state = state.copyWith(
        status: AuthStatus.authenticated,
        user: session.user,
      );
      _loadUserProfile();
    } else {
      state = state.copyWith(status: AuthStatus.unauthenticated);
    }

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    _supabase.auth.onAuthStateChange.listen((data) {
      final session = data.session;
      if (session != null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        final currentUserId = state.user?.id;
        final newUserId = session.user.id;
        
        state = state.copyWith(
          status: AuthStatus.authenticated,
          user: session.user,
        );
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (currentUserId != newUserId) {
          _loadUserProfile();
        }
      } else {
        state = state.copyWith(
          status: AuthStatus.unauthenticated,
          user: null,
          profile: null,
        );
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _loadUserProfile() async {
    if (state.user == null) return;
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (state.profile != null && state.profile!.id == state.user!.id) {
      return;
    }

    try {
      print('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${state.user!.id}');
      final response = await _supabase
          .from('user_profiles')
          .select()
          .eq('id', state.user!.id)
          .single();

      print('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∏–∑ –ë–î: $response');
      final profile = UserProfile.fromJson(response);
      print('–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: ${profile.toString()}');
      state = state.copyWith(profile: profile);
    } catch (error) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: $error');
      // –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Logger
    }
  }

  // –í—Ö–æ–¥ –ø–æ email –∏ –ø–∞—Ä–æ–ª—é (–¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
  Future<void> signInWithEmailPassword(String email, String password) async {
    state = state.copyWith(status: AuthStatus.loading);

    try {
      final response = await _supabase.auth.signInWithPassword(
        email: email,
        password: password,
      );

      if (response.user != null) {
        state = state.copyWith(
          status: AuthStatus.authenticated,
          user: response.user,
        );
        await _loadUserProfile();
      }
    } catch (error) {
      state = state.copyWith(
        status: AuthStatus.error,
        errorMessage: _getErrorMessage(error),
      );
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ OTP –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
  Future<void> signInWithPhone(String phone) async {
    state = state.copyWith(status: AuthStatus.loading);

    try {
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SMS —á–µ—Ä–µ–∑ Supabase
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
      await Future.delayed(const Duration(seconds: 1));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤–æ–º SMS
      SmsDebugService.logSmsInfo(phone);
      
      // OTP "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" —É—Å–ø–µ—à–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
      state = state.copyWith(status: AuthStatus.unauthenticated);
    } catch (error) {
      print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP: $error');
      state = state.copyWith(
        status: AuthStatus.error,
        errorMessage: _getErrorMessage(error),
      );
    }
  }

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –∫–æ–¥–∞
  Future<void> verifyOTP(String phone, String token) async {
    state = state.copyWith(status: AuthStatus.loading);

    try {
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
      if (SmsDebugService.isValidDebugCode(token)) {
        SmsDebugService.logCodeVerification(phone, token);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase —Å email/password –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        final phoneClean = phone.replaceAll('+', '').replaceAll(' ', '');
        final debugEmail = 'client_$phoneClean@xsalon.test';
        final debugPassword = 'test123456';
        
        try {
          print('üîß –°–æ–∑–¥–∞–µ–º/–∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: $debugEmail');
          
          // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          var response = await _supabase.auth.signUp(
            email: debugEmail,
            password: debugPassword,
            data: {
              'phone': phone,
              'full_name': '–ö–ª–∏–µ–Ω—Ç ($phone)',
            },
          );
          
          print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è: ${response.user != null ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω" : "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è"}');
          
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
          if (response.user == null) {
            print('üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...');
            response = await _supabase.auth.signInWithPassword(
              email: debugEmail,
              password: debugPassword,
            );
            print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞: ${response.user != null ? "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω" : "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"}');
          }
          
          if (response.user != null) {
            state = state.copyWith(
              status: AuthStatus.authenticated,
              user: response.user,
            );
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
            await _createOrUpdateClientProfile(phone);
            await _loadUserProfile();
            
            print('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.user!.id}');
            return;
          }
        } catch (supabaseError) {
          print('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Supabase: $supabaseError');
          
          // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
          if (supabaseError.toString().contains('already registered') || 
              supabaseError.toString().contains('User already registered')) {
            try {
              print('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...');
              final loginResponse = await _supabase.auth.signInWithPassword(
                email: debugEmail,
                password: debugPassword,
              );
              
              if (loginResponse.user != null) {
                state = state.copyWith(
                  status: AuthStatus.authenticated,
                  user: loginResponse.user,
                );
                
                await _createOrUpdateClientProfile(phone);
                await _loadUserProfile();
                
                print('‚úÖ –í—Ö–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–µ–Ω!');
                return;
              }
            } catch (loginError) {
              print('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $loginError');
            }
          }
          
          state = state.copyWith(
            status: AuthStatus.error,
            errorMessage: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${_getErrorMessage(supabaseError)}',
          );
          return;
        }
      }
      
      // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
      state = state.copyWith(
        status: AuthStatus.error,
        errorMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      );
    } catch (error) {
      print('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP: $error');
      state = state.copyWith(
        status: AuthStatus.error,
        errorMessage: _getErrorMessage(error),
      );
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ debug –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Supabase)
  Future<void> _createDebugClientProfile(String phone, String userId) async {
    try {
      print('üîß –°–æ–∑–¥–∞–µ–º debug –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞...');
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è debug —Ä–µ–∂–∏–º–∞
      final debugProfile = UserProfile(
        id: userId,
        phone: phone,
        role: 'client',
        isActive: true,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        fullName: 'Debug User ($phone)',
      );
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      state = state.copyWith(profile: debugProfile);
      
      print('‚úÖ Debug –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${debugProfile.displayName}');
    } catch (error) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è debug –ø—Ä–æ—Ñ–∏–ª—è: $error');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  Future<void> _createOrUpdateClientProfile(String phone) async {
    if (state.user == null) return;

    try {
      print('–°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${state.user!.id}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
      final existingProfile = await _supabase
          .from('user_profiles')
          .select()
          .eq('id', state.user!.id)
          .maybeSingle();

      if (existingProfile == null) {
        print('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
        final newProfile = {
          'id': state.user!.id,
          'phone': phone,
          'role': 'client',
          'is_active': true,
          'created_at': DateTime.now().toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
        };
        
        await _supabase.from('user_profiles').insert(newProfile);
        print('‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ clients —Å–æ–∑–¥–∞–ª–∞—Å—å
        await _ensureClientRecordExists(phone);
        
      } else {
        print('–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        await _supabase.from('user_profiles').update({
          'phone': phone,
          'last_login_at': DateTime.now().toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
        }).eq('id', state.user!.id);
        
        print('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ clients —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await _ensureClientRecordExists(phone);
      }
    } catch (error) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞: $error');
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ clients
  Future<void> _ensureClientRecordExists(String phone) async {
    if (state.user == null) return;

    try {
      print('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ clients...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ clients
      final existingClient = await _supabase
          .from('clients')
          .select('id')
          .eq('user_profile_id', state.user!.id)
          .maybeSingle();

      if (existingClient == null) {
        print('–ó–∞–ø–∏—Å—å –≤ clients –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ clients
        final clientData = {
          'user_profile_id': state.user!.id,
          'full_name': '–ö–ª–∏–µ–Ω—Ç ($phone)',
          'phone': phone,
          'status': 'active',
          'total_visits': 0,
          'total_spent': 0.00,
          'loyalty_points': 0,
          'loyalty_level': '–ù–æ–≤–∏—á–æ–∫',
        };
        
        await _supabase.from('clients').insert(clientData);
        print('‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ clients —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        print('‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ clients —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
    } catch (error) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ clients: $error');
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç—Ä–∏–≥–≥–µ—Ä –ë–î –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> signOut() async {
    try {
      print('–ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...');
      await _supabase.auth.signOut();
      print('Supabase signOut –∑–∞–≤–µ—Ä—à–µ–Ω');
      
      state = state.copyWith(
        status: AuthStatus.unauthenticated,
        user: null,
        profile: null,
      );
      print('–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${state.status}');
    } catch (error) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: $error');
      state = state.copyWith(
        status: AuthStatus.error,
        errorMessage: _getErrorMessage(error),
      );
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  void clearError() {
    state = state.copyWith(
      status: AuthStatus.unauthenticated,
      errorMessage: null,
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  String _getErrorMessage(dynamic error) {
    if (error is AuthException) {
      switch (error.message) {
        case 'Invalid login credentials':
          return '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        case 'Email not confirmed':
          return 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
        case 'Invalid phone number':
          return '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        case 'Token has expired or is invalid':
          return '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω';
        default:
          return error.message;
      }
    }
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.toString()}';
  }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  return AuthNotifier();
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
final isAuthenticatedProvider = Provider<bool>((ref) {
  final authState = ref.watch(authProvider);
  return authState.status == AuthStatus.authenticated;
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final currentUserProvider = Provider<User?>((ref) {
  final authState = ref.watch(authProvider);
  return authState.user;
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final userProfileProvider = Provider<UserProfile?>((ref) {
  final authState = ref.watch(authProvider);
  return authState.profile;
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final isStaffProvider = Provider<bool>((ref) {
  final profile = ref.watch(userProfileProvider);
  return profile?.role == 'master' || 
         profile?.role == 'admin' || 
         profile?.role == 'owner';
});
